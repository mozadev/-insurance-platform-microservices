name: CI (lint & type-check)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
      - name: Ruff lint
        run: |
          ruff version
          ruff check services shared
      - name: Type check (mypy)
        run: |
          mypy --version
          mypy services || true

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: pip install uv
      
      - name: Install dependencies
        run: |
          cd services/policy-svc && uv sync
          cd ../claim-svc && uv sync
          cd ../search-svc && uv sync
          cd ../gateway-bff && uv sync
          cd ../auth-svc && uv sync
      
      - name: Run linting
        run: |
          cd services/policy-svc && uv run ruff check .
          cd ../claim-svc && uv run ruff check .
          cd ../search-svc && uv run ruff check .
          cd ../gateway-bff && uv run ruff check .
          cd ../auth-svc && uv run ruff check .
      
      - name: Run type checking
        run: |
          cd services/policy-svc && uv run mypy .
          cd ../claim-svc && uv run mypy .
          cd ../search-svc && uv run mypy .
          cd ../gateway-bff && uv run mypy .
          cd ../auth-svc && uv run mypy .

  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    services:
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,sns,sqs
          DEBUG: 1
      
      opensearch:
        image: opensearchproject/opensearch:2.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: true
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: pip install uv
      
      - name: Install dependencies
        run: |
          cd services/policy-svc && uv sync
          cd ../claim-svc && uv sync
          cd ../search-svc && uv sync
          cd ../gateway-bff && uv sync
          cd ../auth-svc && uv sync
      
      - name: Wait for services
        run: |
          sleep 30
          curl -f http://localhost:4566/_localstack/health
          curl -f http://localhost:9200/_cluster/health
          redis-cli -h localhost ping
      
      - name: Run tests
        run: |
          cd services/policy-svc && uv run pytest tests/ -v --cov=app --cov-report=xml
          cd ../claim-svc && uv run pytest tests/ -v --cov=app --cov-report=xml
          cd ../search-svc && uv run pytest tests/ -v --cov=app --cov-report=xml
          cd ../gateway-bff && uv run pytest tests/ -v --cov=app --cov-report=xml
          cd ../auth-svc && uv run pytest tests/ -v --cov=app --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./services/*/coverage.xml

  build-and-scan:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [policy-svc, claim-svc, search-svc, gateway-bff, auth-svc]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t insurance-${{ matrix.service }}:latest \
            -f services/${{ matrix.service }}/Dockerfile \
            services/${{ matrix.service }}/
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'insurance-${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  terraform-plan:
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
      
      - name: Terraform Format Check
        run: |
          cd infra/terraform
          terraform fmt -check -recursive
      
      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init
      
      - name: Terraform Validate
        run: |
          cd infra/terraform
          terraform validate
      
      - name: Terraform Plan
        run: |
          cd infra/terraform
          terraform plan -var-file=envs/dev/terraform.tfvars

  deploy-dev:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/develop'
    environment: dev
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
      
      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve -var-file=envs/dev/terraform.tfvars
